#pragma once

//────────────────────────────────────────────────────────────────────────────────
// 機械学習モードにするか否か
//────────────────────────────────────────────────────────────────────────────────
#if 0
// 機械学習を行う際に使う。
#define LEARN
#if 0
// MPI で複数台のPCを使って学習する。
// todo: 実装はまだ。
#define MPI_LEARN
#endif
#endif

//────────────────────────────────────────────────────────────────────────────────
// (^q^)独自実装：フィーッシャールールか否か
//────────────────────────────────────────────────────────────────────────────────
#define FISCHER_RULE

//────────────────────────────────────────────────────────────────────────────────
// (^q^)独自実装：学習に時間のかかる評価値をスキップするか？
//────────────────────────────────────────────────────────────────────────────────
// 評価値ファイル・キャッシュ作成モードか。
#define MODE_CACHE_EVAL

#if !defined(MODE_CACHE_EVAL) // 評価値ファイル作成モード以外で使用できる設定
// 評価値ファイル・キャッシュを作成しない場合、スキップできる特典。

// ただし、これでスキップしてコンパイルした場合、abort()で落ちるんだぜ☆（＾～＾）
//#define SKIP_LONG_TIME_EVAL

// これでスキップしてコンパイルしても abort()では落ちないぜ☆（＾～＾）
//#define SKIP_LONG_LONG_TIME_EVAL_KPP
// KKPも数十分で終わるぜ☆（＾ｑ＾）
//#define SKIP_LONG_LONG_TIME_EVAL_KKP
// KK は比較的早く終わるぜ☆（^q^）
//#define SKIP_LONG_LONG_TIME_EVAL_KK
// KPP評価値の集計をスキップするか。
//#define SKIP_KPP_EVAL_LOOP
#endif

//────────────────────────────────────────────────────────────────────────────────
// 使う評価値（４種類）
//────────────────────────────────────────────────────────────────────────────────
#define EVAL_PHASE1
#ifndef SKIP_LONG_TIME_EVAL
	#define EVAL_PHASE2
	#define EVAL_PHASE3
	#define EVAL_PHASE4
#endif

//────────────────────────────────────────────────────────────────────────────────
// AVX2、SSE4 を使うか？
//────────────────────────────────────────────────────────────────────────────────
#if 1
// 評価関数の SIMD 化
#if defined HAVE_AVX2
#define USE_AVX2_EVAL
#elif defined HAVE_SSE4
#define USE_SSE_EVAL
#endif
#endif

//────────────────────────────────────────────────────────────────────────────────
// 入玉ボーナス
//────────────────────────────────────────────────────────────────────────────────
#if 0
// 玉の位置にボーナスを与える。
// 入玉を狙ったり、相手の入玉を阻止したりする為に使う。
// 評価関数は普段はこれをoffにした状態で学習する。
// 有効にしたなら追加である程度学習して馴染ませる必要がある。
#define USE_K_FIX_OFFSET
#endif

//────────────────────────────────────────────────────────────────────────────────
// 定跡作成時
//────────────────────────────────────────────────────────────────────────────────
#if 1
// 定跡作成時に探索を用いて定跡に点数を付ける。
#define MAKE_SEARCHED_BOOK
#endif

//────────────────────────────────────────────────────────────────────────────────
// （未使用）
//────────────────────────────────────────────────────────────────────────────────
#if 0
// 対局で使わない機能を全て省いたものにする。
// todo: 現状メンテナンスされていないのでやること。
#define MINIMUL
#endif

//────────────────────────────────────────────────────────────────────────────────
// 稲庭対策
//────────────────────────────────────────────────────────────────────────────────
#if 0
// 稲庭判定、稲庭対策を有効にする。
#define INANIWA_SHIFT
#endif

//────────────────────────────────────────────────────────────────────────────────
// △２八角等の対策
//────────────────────────────────────────────────────────────────────────────────
#if 0
// △２八角、△７八角 を打たないように点数を補正する。
#define BISHOP_IN_DANGER
#endif

//────────────────────────────────────────────────────────────────────────────────
// 24点法
//────────────────────────────────────────────────────────────────────────────────
#if 0
// 入玉を24点法にする。
#define LAW_24
#endif

//────────────────────────────────────────────────────────────────────────────────
// 千日手を禁止して考えるか
//────────────────────────────────────────────────────────────────────────────────
#if 0
// 探索時に片方だけが千日手を禁止して考える。
#define BAN_BLACK_REPETITION
#elif 0
#define BAN_WHITE_REPETITION
#endif

//────────────────────────────────────────────────────────────────────────────────
// マジックナンバー探しモード
//────────────────────────────────────────────────────────────────────────────────
#if 0
// Magic Bitboard で必要となるマジックナンバーを求める。
#define FIND_MAGIC
#endif
